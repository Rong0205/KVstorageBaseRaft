// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raftPersistDate.proto

#include "raftPersistDate.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace raftPersistDate {
PROTOBUF_CONSTEXPR LogEntry::LogEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.command_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.term_)*/0
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogEntryDefaultTypeInternal() {}
  union {
    LogEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogEntryDefaultTypeInternal _LogEntry_default_instance_;
PROTOBUF_CONSTEXPR PersistRaftNode::PersistRaftNode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.logs_)*/{}
  , /*decltype(_impl_.current_term_)*/0
  , /*decltype(_impl_.voted_for_)*/0
  , /*decltype(_impl_.last_snapshot_include_index_)*/0
  , /*decltype(_impl_.last_snapshot_include_term_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PersistRaftNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PersistRaftNodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PersistRaftNodeDefaultTypeInternal() {}
  union {
    PersistRaftNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PersistRaftNodeDefaultTypeInternal _PersistRaftNode_default_instance_;
}  // namespace raftPersistDate
static ::_pb::Metadata file_level_metadata_raftPersistDate_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_raftPersistDate_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_raftPersistDate_2eproto = nullptr;

const uint32_t TableStruct_raftPersistDate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftPersistDate::LogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raftPersistDate::LogEntry, _impl_.term_),
  PROTOBUF_FIELD_OFFSET(::raftPersistDate::LogEntry, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::raftPersistDate::LogEntry, _impl_.command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raftPersistDate::PersistRaftNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raftPersistDate::PersistRaftNode, _impl_.current_term_),
  PROTOBUF_FIELD_OFFSET(::raftPersistDate::PersistRaftNode, _impl_.voted_for_),
  PROTOBUF_FIELD_OFFSET(::raftPersistDate::PersistRaftNode, _impl_.last_snapshot_include_index_),
  PROTOBUF_FIELD_OFFSET(::raftPersistDate::PersistRaftNode, _impl_.last_snapshot_include_term_),
  PROTOBUF_FIELD_OFFSET(::raftPersistDate::PersistRaftNode, _impl_.logs_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::raftPersistDate::LogEntry)},
  { 9, -1, -1, sizeof(::raftPersistDate::PersistRaftNode)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::raftPersistDate::_LogEntry_default_instance_._instance,
  &::raftPersistDate::_PersistRaftNode_default_instance_._instance,
};

const char descriptor_table_protodef_raftPersistDate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025raftPersistDate.proto\022\017raftPersistDate"
  "\"8\n\010LogEntry\022\014\n\004term\030\001 \001(\005\022\r\n\005index\030\002 \001("
  "\005\022\017\n\007command\030\003 \001(\t\"\254\001\n\017PersistRaftNode\022\024"
  "\n\014current_term\030\001 \001(\005\022\021\n\tvoted_for\030\002 \001(\005\022"
  "#\n\033last_snapshot_include_index\030\003 \001(\005\022\"\n\032"
  "last_snapshot_include_term\030\004 \001(\005\022\'\n\004logs"
  "\030\005 \003(\0132\031.raftPersistDate.LogEntryb\006proto"
  "3"
  ;
static ::_pbi::once_flag descriptor_table_raftPersistDate_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_raftPersistDate_2eproto = {
    false, false, 281, descriptor_table_protodef_raftPersistDate_2eproto,
    "raftPersistDate.proto",
    &descriptor_table_raftPersistDate_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_raftPersistDate_2eproto::offsets,
    file_level_metadata_raftPersistDate_2eproto, file_level_enum_descriptors_raftPersistDate_2eproto,
    file_level_service_descriptors_raftPersistDate_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_raftPersistDate_2eproto_getter() {
  return &descriptor_table_raftPersistDate_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_raftPersistDate_2eproto(&descriptor_table_raftPersistDate_2eproto);
namespace raftPersistDate {

// ===================================================================

class LogEntry::_Internal {
 public:
};

LogEntry::LogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:raftPersistDate.LogEntry)
}
LogEntry::LogEntry(const LogEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.command_){}
    , decltype(_impl_.term_){}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_command().empty()) {
    _this->_impl_.command_.Set(from._internal_command(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.term_, &from._impl_.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.index_) -
    reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.index_));
  // @@protoc_insertion_point(copy_constructor:raftPersistDate.LogEntry)
}

inline void LogEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.command_){}
    , decltype(_impl_.term_){0}
    , decltype(_impl_.index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogEntry::~LogEntry() {
  // @@protoc_insertion_point(destructor:raftPersistDate.LogEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.command_.Destroy();
}

void LogEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:raftPersistDate.LogEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.command_.ClearToEmpty();
  ::memset(&_impl_.term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.index_) -
      reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string command = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_command();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "raftPersistDate.LogEntry.command"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftPersistDate.LogEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // int32 index = 2;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  // string command = 3;
  if (!this->_internal_command().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raftPersistDate.LogEntry.command");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftPersistDate.LogEntry)
  return target;
}

size_t LogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftPersistDate.LogEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string command = 3;
  if (!this->_internal_command().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command());
  }

  // int32 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_term());
  }

  // int32 index = 2;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogEntry::GetClassData() const { return &_class_data_; }


void LogEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogEntry*>(&to_msg);
  auto& from = static_cast<const LogEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raftPersistDate.LogEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_command().empty()) {
    _this->_internal_set_command(from._internal_command());
  }
  if (from._internal_term() != 0) {
    _this->_internal_set_term(from._internal_term());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogEntry::CopyFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftPersistDate.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntry::IsInitialized() const {
  return true;
}

void LogEntry::InternalSwap(LogEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.command_, lhs_arena,
      &other->_impl_.command_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.index_)
      + sizeof(LogEntry::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raftPersistDate_2eproto_getter, &descriptor_table_raftPersistDate_2eproto_once,
      file_level_metadata_raftPersistDate_2eproto[0]);
}

// ===================================================================

class PersistRaftNode::_Internal {
 public:
};

PersistRaftNode::PersistRaftNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:raftPersistDate.PersistRaftNode)
}
PersistRaftNode::PersistRaftNode(const PersistRaftNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PersistRaftNode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.logs_){from._impl_.logs_}
    , decltype(_impl_.current_term_){}
    , decltype(_impl_.voted_for_){}
    , decltype(_impl_.last_snapshot_include_index_){}
    , decltype(_impl_.last_snapshot_include_term_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.current_term_, &from._impl_.current_term_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_snapshot_include_term_) -
    reinterpret_cast<char*>(&_impl_.current_term_)) + sizeof(_impl_.last_snapshot_include_term_));
  // @@protoc_insertion_point(copy_constructor:raftPersistDate.PersistRaftNode)
}

inline void PersistRaftNode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.logs_){arena}
    , decltype(_impl_.current_term_){0}
    , decltype(_impl_.voted_for_){0}
    , decltype(_impl_.last_snapshot_include_index_){0}
    , decltype(_impl_.last_snapshot_include_term_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PersistRaftNode::~PersistRaftNode() {
  // @@protoc_insertion_point(destructor:raftPersistDate.PersistRaftNode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PersistRaftNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.logs_.~RepeatedPtrField();
}

void PersistRaftNode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PersistRaftNode::Clear() {
// @@protoc_insertion_point(message_clear_start:raftPersistDate.PersistRaftNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.logs_.Clear();
  ::memset(&_impl_.current_term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.last_snapshot_include_term_) -
      reinterpret_cast<char*>(&_impl_.current_term_)) + sizeof(_impl_.last_snapshot_include_term_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PersistRaftNode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 current_term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.current_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 voted_for = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.voted_for_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 last_snapshot_include_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.last_snapshot_include_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 last_snapshot_include_term = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.last_snapshot_include_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .raftPersistDate.LogEntry logs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PersistRaftNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftPersistDate.PersistRaftNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 current_term = 1;
  if (this->_internal_current_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_current_term(), target);
  }

  // int32 voted_for = 2;
  if (this->_internal_voted_for() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_voted_for(), target);
  }

  // int32 last_snapshot_include_index = 3;
  if (this->_internal_last_snapshot_include_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_last_snapshot_include_index(), target);
  }

  // int32 last_snapshot_include_term = 4;
  if (this->_internal_last_snapshot_include_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_last_snapshot_include_term(), target);
  }

  // repeated .raftPersistDate.LogEntry logs = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_logs_size()); i < n; i++) {
    const auto& repfield = this->_internal_logs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftPersistDate.PersistRaftNode)
  return target;
}

size_t PersistRaftNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raftPersistDate.PersistRaftNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .raftPersistDate.LogEntry logs = 5;
  total_size += 1UL * this->_internal_logs_size();
  for (const auto& msg : this->_impl_.logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 current_term = 1;
  if (this->_internal_current_term() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_current_term());
  }

  // int32 voted_for = 2;
  if (this->_internal_voted_for() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_voted_for());
  }

  // int32 last_snapshot_include_index = 3;
  if (this->_internal_last_snapshot_include_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_last_snapshot_include_index());
  }

  // int32 last_snapshot_include_term = 4;
  if (this->_internal_last_snapshot_include_term() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_last_snapshot_include_term());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PersistRaftNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PersistRaftNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PersistRaftNode::GetClassData() const { return &_class_data_; }


void PersistRaftNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PersistRaftNode*>(&to_msg);
  auto& from = static_cast<const PersistRaftNode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raftPersistDate.PersistRaftNode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.logs_.MergeFrom(from._impl_.logs_);
  if (from._internal_current_term() != 0) {
    _this->_internal_set_current_term(from._internal_current_term());
  }
  if (from._internal_voted_for() != 0) {
    _this->_internal_set_voted_for(from._internal_voted_for());
  }
  if (from._internal_last_snapshot_include_index() != 0) {
    _this->_internal_set_last_snapshot_include_index(from._internal_last_snapshot_include_index());
  }
  if (from._internal_last_snapshot_include_term() != 0) {
    _this->_internal_set_last_snapshot_include_term(from._internal_last_snapshot_include_term());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PersistRaftNode::CopyFrom(const PersistRaftNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raftPersistDate.PersistRaftNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersistRaftNode::IsInitialized() const {
  return true;
}

void PersistRaftNode::InternalSwap(PersistRaftNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.logs_.InternalSwap(&other->_impl_.logs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PersistRaftNode, _impl_.last_snapshot_include_term_)
      + sizeof(PersistRaftNode::_impl_.last_snapshot_include_term_)
      - PROTOBUF_FIELD_OFFSET(PersistRaftNode, _impl_.current_term_)>(
          reinterpret_cast<char*>(&_impl_.current_term_),
          reinterpret_cast<char*>(&other->_impl_.current_term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PersistRaftNode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raftPersistDate_2eproto_getter, &descriptor_table_raftPersistDate_2eproto_once,
      file_level_metadata_raftPersistDate_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace raftPersistDate
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::raftPersistDate::LogEntry*
Arena::CreateMaybeMessage< ::raftPersistDate::LogEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raftPersistDate::LogEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::raftPersistDate::PersistRaftNode*
Arena::CreateMaybeMessage< ::raftPersistDate::PersistRaftNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raftPersistDate::PersistRaftNode >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
